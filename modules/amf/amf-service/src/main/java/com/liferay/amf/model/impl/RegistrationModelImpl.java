/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.amf.model.impl;

import com.liferay.amf.model.Registration;
import com.liferay.amf.model.RegistrationModel;
import com.liferay.amf.model.RegistrationSoap;
import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Registration service. Represents a row in the &quot;AmfRegistration_Registration&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>RegistrationModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link RegistrationImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see RegistrationImpl
 * @generated
 */
@JSON(strict = true)
public class RegistrationModelImpl
	extends BaseModelImpl<Registration> implements RegistrationModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a registration model instance should use the <code>Registration</code> interface instead.
	 */
	public static final String TABLE_NAME = "AmfRegistration_Registration";

	public static final Object[][] TABLE_COLUMNS = {
		{"amfRegistrationId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"firstName", Types.VARCHAR},
		{"lastName", Types.VARCHAR}, {"emailAddress", Types.VARCHAR},
		{"gender", Types.VARCHAR}, {"birthday", Types.TIMESTAMP},
		{"password_", Types.VARCHAR}, {"homePhone", Types.VARCHAR},
		{"mobilePhone", Types.VARCHAR}, {"address1", Types.VARCHAR},
		{"address2", Types.VARCHAR}, {"city", Types.VARCHAR},
		{"state_", Types.VARCHAR}, {"zipCode", Types.BIGINT},
		{"securityAnswer", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("amfRegistrationId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("firstName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("lastName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("emailAddress", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("gender", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("birthday", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("password_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("homePhone", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("mobilePhone", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("address1", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("address2", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("city", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("state_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("zipCode", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("securityAnswer", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table AmfRegistration_Registration (amfRegistrationId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,firstName VARCHAR(50) null,lastName VARCHAR(50) null,emailAddress VARCHAR(255) null,gender VARCHAR(75) null,birthday DATE null,password_ VARCHAR(75) null,homePhone VARCHAR(75) null,mobilePhone VARCHAR(75) null,address1 VARCHAR(75) null,address2 VARCHAR(75) null,city VARCHAR(75) null,state_ VARCHAR(75) null,zipCode LONG,securityAnswer VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP =
		"drop table AmfRegistration_Registration";

	public static final String ORDER_BY_JPQL =
		" ORDER BY registration.amfRegistrationId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY AmfRegistration_Registration.amfRegistrationId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long AMFREGISTRATIONID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static Registration toModel(RegistrationSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Registration model = new RegistrationImpl();

		model.setAmfRegistrationId(soapModel.getAmfRegistrationId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setFirstName(soapModel.getFirstName());
		model.setLastName(soapModel.getLastName());
		model.setEmailAddress(soapModel.getEmailAddress());
		model.setGender(soapModel.getGender());
		model.setBirthday(soapModel.getBirthday());
		model.setPassword(soapModel.getPassword());
		model.setHomePhone(soapModel.getHomePhone());
		model.setMobilePhone(soapModel.getMobilePhone());
		model.setAddress1(soapModel.getAddress1());
		model.setAddress2(soapModel.getAddress2());
		model.setCity(soapModel.getCity());
		model.setState(soapModel.getState());
		model.setZipCode(soapModel.getZipCode());
		model.setSecurityAnswer(soapModel.getSecurityAnswer());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static List<Registration> toModels(RegistrationSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Registration> models = new ArrayList<Registration>(
			soapModels.length);

		for (RegistrationSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public RegistrationModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _amfRegistrationId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setAmfRegistrationId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _amfRegistrationId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Registration.class;
	}

	@Override
	public String getModelClassName() {
		return Registration.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Registration, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Registration, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Registration, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((Registration)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Registration, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Registration, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Registration)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Registration, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Registration, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, Registration>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			Registration.class.getClassLoader(), Registration.class,
			ModelWrapper.class);

		try {
			Constructor<Registration> constructor =
				(Constructor<Registration>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<Registration, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Registration, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Registration, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Registration, Object>>();
		Map<String, BiConsumer<Registration, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Registration, ?>>();

		attributeGetterFunctions.put(
			"amfRegistrationId", Registration::getAmfRegistrationId);
		attributeSetterBiConsumers.put(
			"amfRegistrationId",
			(BiConsumer<Registration, Long>)Registration::setAmfRegistrationId);
		attributeGetterFunctions.put("groupId", Registration::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId",
			(BiConsumer<Registration, Long>)Registration::setGroupId);
		attributeGetterFunctions.put("companyId", Registration::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<Registration, Long>)Registration::setCompanyId);
		attributeGetterFunctions.put("userId", Registration::getUserId);
		attributeSetterBiConsumers.put(
			"userId", (BiConsumer<Registration, Long>)Registration::setUserId);
		attributeGetterFunctions.put("userName", Registration::getUserName);
		attributeSetterBiConsumers.put(
			"userName",
			(BiConsumer<Registration, String>)Registration::setUserName);
		attributeGetterFunctions.put("createDate", Registration::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<Registration, Date>)Registration::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate", Registration::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<Registration, Date>)Registration::setModifiedDate);
		attributeGetterFunctions.put("firstName", Registration::getFirstName);
		attributeSetterBiConsumers.put(
			"firstName",
			(BiConsumer<Registration, String>)Registration::setFirstName);
		attributeGetterFunctions.put("lastName", Registration::getLastName);
		attributeSetterBiConsumers.put(
			"lastName",
			(BiConsumer<Registration, String>)Registration::setLastName);
		attributeGetterFunctions.put(
			"emailAddress", Registration::getEmailAddress);
		attributeSetterBiConsumers.put(
			"emailAddress",
			(BiConsumer<Registration, String>)Registration::setEmailAddress);
		attributeGetterFunctions.put("gender", Registration::getGender);
		attributeSetterBiConsumers.put(
			"gender",
			(BiConsumer<Registration, String>)Registration::setGender);
		attributeGetterFunctions.put("birthday", Registration::getBirthday);
		attributeSetterBiConsumers.put(
			"birthday",
			(BiConsumer<Registration, Date>)Registration::setBirthday);
		attributeGetterFunctions.put("password", Registration::getPassword);
		attributeSetterBiConsumers.put(
			"password",
			(BiConsumer<Registration, String>)Registration::setPassword);
		attributeGetterFunctions.put("homePhone", Registration::getHomePhone);
		attributeSetterBiConsumers.put(
			"homePhone",
			(BiConsumer<Registration, String>)Registration::setHomePhone);
		attributeGetterFunctions.put(
			"mobilePhone", Registration::getMobilePhone);
		attributeSetterBiConsumers.put(
			"mobilePhone",
			(BiConsumer<Registration, String>)Registration::setMobilePhone);
		attributeGetterFunctions.put("address1", Registration::getAddress1);
		attributeSetterBiConsumers.put(
			"address1",
			(BiConsumer<Registration, String>)Registration::setAddress1);
		attributeGetterFunctions.put("address2", Registration::getAddress2);
		attributeSetterBiConsumers.put(
			"address2",
			(BiConsumer<Registration, String>)Registration::setAddress2);
		attributeGetterFunctions.put("city", Registration::getCity);
		attributeSetterBiConsumers.put(
			"city", (BiConsumer<Registration, String>)Registration::setCity);
		attributeGetterFunctions.put("state", Registration::getState);
		attributeSetterBiConsumers.put(
			"state", (BiConsumer<Registration, String>)Registration::setState);
		attributeGetterFunctions.put("zipCode", Registration::getZipCode);
		attributeSetterBiConsumers.put(
			"zipCode",
			(BiConsumer<Registration, Long>)Registration::setZipCode);
		attributeGetterFunctions.put(
			"securityAnswer", Registration::getSecurityAnswer);
		attributeSetterBiConsumers.put(
			"securityAnswer",
			(BiConsumer<Registration, String>)Registration::setSecurityAnswer);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getAmfRegistrationId() {
		return _amfRegistrationId;
	}

	@Override
	public void setAmfRegistrationId(long amfRegistrationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_amfRegistrationId = amfRegistrationId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getFirstName() {
		if (_firstName == null) {
			return "";
		}
		else {
			return _firstName;
		}
	}

	@Override
	public void setFirstName(String firstName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_firstName = firstName;
	}

	@JSON
	@Override
	public String getLastName() {
		if (_lastName == null) {
			return "";
		}
		else {
			return _lastName;
		}
	}

	@Override
	public void setLastName(String lastName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_lastName = lastName;
	}

	@JSON
	@Override
	public String getEmailAddress() {
		if (_emailAddress == null) {
			return "";
		}
		else {
			return _emailAddress;
		}
	}

	@Override
	public void setEmailAddress(String emailAddress) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_emailAddress = emailAddress;
	}

	@JSON
	@Override
	public String getGender() {
		if (_gender == null) {
			return "";
		}
		else {
			return _gender;
		}
	}

	@Override
	public void setGender(String gender) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_gender = gender;
	}

	@JSON
	@Override
	public Date getBirthday() {
		return _birthday;
	}

	@Override
	public void setBirthday(Date birthday) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_birthday = birthday;
	}

	@JSON
	@Override
	public String getPassword() {
		if (_password == null) {
			return "";
		}
		else {
			return _password;
		}
	}

	@Override
	public void setPassword(String password) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_password = password;
	}

	@JSON
	@Override
	public String getHomePhone() {
		if (_homePhone == null) {
			return "";
		}
		else {
			return _homePhone;
		}
	}

	@Override
	public void setHomePhone(String homePhone) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_homePhone = homePhone;
	}

	@JSON
	@Override
	public String getMobilePhone() {
		if (_mobilePhone == null) {
			return "";
		}
		else {
			return _mobilePhone;
		}
	}

	@Override
	public void setMobilePhone(String mobilePhone) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_mobilePhone = mobilePhone;
	}

	@JSON
	@Override
	public String getAddress1() {
		if (_address1 == null) {
			return "";
		}
		else {
			return _address1;
		}
	}

	@Override
	public void setAddress1(String address1) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_address1 = address1;
	}

	@JSON
	@Override
	public String getAddress2() {
		if (_address2 == null) {
			return "";
		}
		else {
			return _address2;
		}
	}

	@Override
	public void setAddress2(String address2) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_address2 = address2;
	}

	@JSON
	@Override
	public String getCity() {
		if (_city == null) {
			return "";
		}
		else {
			return _city;
		}
	}

	@Override
	public void setCity(String city) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_city = city;
	}

	@JSON
	@Override
	public String getState() {
		if (_state == null) {
			return "";
		}
		else {
			return _state;
		}
	}

	@Override
	public void setState(String state) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_state = state;
	}

	@JSON
	@Override
	public Long getZipCode() {
		return _zipCode;
	}

	@Override
	public void setZipCode(Long zipCode) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_zipCode = zipCode;
	}

	@JSON
	@Override
	public String getSecurityAnswer() {
		if (_securityAnswer == null) {
			return "";
		}
		else {
			return _securityAnswer;
		}
	}

	@Override
	public void setSecurityAnswer(String securityAnswer) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_securityAnswer = securityAnswer;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), Registration.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Registration toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Registration>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		RegistrationImpl registrationImpl = new RegistrationImpl();

		registrationImpl.setAmfRegistrationId(getAmfRegistrationId());
		registrationImpl.setGroupId(getGroupId());
		registrationImpl.setCompanyId(getCompanyId());
		registrationImpl.setUserId(getUserId());
		registrationImpl.setUserName(getUserName());
		registrationImpl.setCreateDate(getCreateDate());
		registrationImpl.setModifiedDate(getModifiedDate());
		registrationImpl.setFirstName(getFirstName());
		registrationImpl.setLastName(getLastName());
		registrationImpl.setEmailAddress(getEmailAddress());
		registrationImpl.setGender(getGender());
		registrationImpl.setBirthday(getBirthday());
		registrationImpl.setPassword(getPassword());
		registrationImpl.setHomePhone(getHomePhone());
		registrationImpl.setMobilePhone(getMobilePhone());
		registrationImpl.setAddress1(getAddress1());
		registrationImpl.setAddress2(getAddress2());
		registrationImpl.setCity(getCity());
		registrationImpl.setState(getState());
		registrationImpl.setZipCode(getZipCode());
		registrationImpl.setSecurityAnswer(getSecurityAnswer());

		registrationImpl.resetOriginalValues();

		return registrationImpl;
	}

	@Override
	public int compareTo(Registration registration) {
		long primaryKey = registration.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof Registration)) {
			return false;
		}

		Registration registration = (Registration)object;

		long primaryKey = registration.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<Registration> toCacheModel() {
		RegistrationCacheModel registrationCacheModel =
			new RegistrationCacheModel();

		registrationCacheModel.amfRegistrationId = getAmfRegistrationId();

		registrationCacheModel.groupId = getGroupId();

		registrationCacheModel.companyId = getCompanyId();

		registrationCacheModel.userId = getUserId();

		registrationCacheModel.userName = getUserName();

		String userName = registrationCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			registrationCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			registrationCacheModel.createDate = createDate.getTime();
		}
		else {
			registrationCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			registrationCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			registrationCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		registrationCacheModel.firstName = getFirstName();

		String firstName = registrationCacheModel.firstName;

		if ((firstName != null) && (firstName.length() == 0)) {
			registrationCacheModel.firstName = null;
		}

		registrationCacheModel.lastName = getLastName();

		String lastName = registrationCacheModel.lastName;

		if ((lastName != null) && (lastName.length() == 0)) {
			registrationCacheModel.lastName = null;
		}

		registrationCacheModel.emailAddress = getEmailAddress();

		String emailAddress = registrationCacheModel.emailAddress;

		if ((emailAddress != null) && (emailAddress.length() == 0)) {
			registrationCacheModel.emailAddress = null;
		}

		registrationCacheModel.gender = getGender();

		String gender = registrationCacheModel.gender;

		if ((gender != null) && (gender.length() == 0)) {
			registrationCacheModel.gender = null;
		}

		Date birthday = getBirthday();

		if (birthday != null) {
			registrationCacheModel.birthday = birthday.getTime();
		}
		else {
			registrationCacheModel.birthday = Long.MIN_VALUE;
		}

		registrationCacheModel.password = getPassword();

		String password = registrationCacheModel.password;

		if ((password != null) && (password.length() == 0)) {
			registrationCacheModel.password = null;
		}

		registrationCacheModel.homePhone = getHomePhone();

		String homePhone = registrationCacheModel.homePhone;

		if ((homePhone != null) && (homePhone.length() == 0)) {
			registrationCacheModel.homePhone = null;
		}

		registrationCacheModel.mobilePhone = getMobilePhone();

		String mobilePhone = registrationCacheModel.mobilePhone;

		if ((mobilePhone != null) && (mobilePhone.length() == 0)) {
			registrationCacheModel.mobilePhone = null;
		}

		registrationCacheModel.address1 = getAddress1();

		String address1 = registrationCacheModel.address1;

		if ((address1 != null) && (address1.length() == 0)) {
			registrationCacheModel.address1 = null;
		}

		registrationCacheModel.address2 = getAddress2();

		String address2 = registrationCacheModel.address2;

		if ((address2 != null) && (address2.length() == 0)) {
			registrationCacheModel.address2 = null;
		}

		registrationCacheModel.city = getCity();

		String city = registrationCacheModel.city;

		if ((city != null) && (city.length() == 0)) {
			registrationCacheModel.city = null;
		}

		registrationCacheModel.state = getState();

		String state = registrationCacheModel.state;

		if ((state != null) && (state.length() == 0)) {
			registrationCacheModel.state = null;
		}

		Long zipCode = getZipCode();

		if (zipCode != null) {
			registrationCacheModel.zipCode = zipCode;
		}

		registrationCacheModel.securityAnswer = getSecurityAnswer();

		String securityAnswer = registrationCacheModel.securityAnswer;

		if ((securityAnswer != null) && (securityAnswer.length() == 0)) {
			registrationCacheModel.securityAnswer = null;
		}

		return registrationCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Registration, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(4 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Registration, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Registration, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((Registration)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<Registration, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<Registration, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Registration, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((Registration)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Registration>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private long _amfRegistrationId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _firstName;
	private String _lastName;
	private String _emailAddress;
	private String _gender;
	private Date _birthday;
	private String _password;
	private String _homePhone;
	private String _mobilePhone;
	private String _address1;
	private String _address2;
	private String _city;
	private String _state;
	private Long _zipCode;
	private String _securityAnswer;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<Registration, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((Registration)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("amfRegistrationId", _amfRegistrationId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("firstName", _firstName);
		_columnOriginalValues.put("lastName", _lastName);
		_columnOriginalValues.put("emailAddress", _emailAddress);
		_columnOriginalValues.put("gender", _gender);
		_columnOriginalValues.put("birthday", _birthday);
		_columnOriginalValues.put("password_", _password);
		_columnOriginalValues.put("homePhone", _homePhone);
		_columnOriginalValues.put("mobilePhone", _mobilePhone);
		_columnOriginalValues.put("address1", _address1);
		_columnOriginalValues.put("address2", _address2);
		_columnOriginalValues.put("city", _city);
		_columnOriginalValues.put("state_", _state);
		_columnOriginalValues.put("zipCode", _zipCode);
		_columnOriginalValues.put("securityAnswer", _securityAnswer);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("password_", "password");
		attributeNames.put("state_", "state");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("amfRegistrationId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("userName", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		columnBitmasks.put("firstName", 128L);

		columnBitmasks.put("lastName", 256L);

		columnBitmasks.put("emailAddress", 512L);

		columnBitmasks.put("gender", 1024L);

		columnBitmasks.put("birthday", 2048L);

		columnBitmasks.put("password_", 4096L);

		columnBitmasks.put("homePhone", 8192L);

		columnBitmasks.put("mobilePhone", 16384L);

		columnBitmasks.put("address1", 32768L);

		columnBitmasks.put("address2", 65536L);

		columnBitmasks.put("city", 131072L);

		columnBitmasks.put("state_", 262144L);

		columnBitmasks.put("zipCode", 524288L);

		columnBitmasks.put("securityAnswer", 1048576L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private Registration _escapedModel;

}